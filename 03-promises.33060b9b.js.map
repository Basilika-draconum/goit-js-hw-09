{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,UAea,CACXC,mBAAoBC,SAASC,cAAc,SAC3CC,iBAAkBF,SAASC,cAAc,YAEtCF,mBAAmBI,iBAAiB,UAEzC,SAAoCC,GAClCA,EAAEC,iBAEF,MAAMC,EAAkBC,OAAOH,EAAEI,OAAOC,SAASC,MAAMC,OACjDC,EAAiBL,OAAOH,EAAEI,OAAOC,SAASI,KAAKF,OAC/CG,EAAsBP,OAAOH,EAAEI,OAAOC,SAASM,OAAOJ,OAE5D,IAAIK,EAAU,GAEd,SAASC,IACP,KAAID,GAAWF,GAiBb,OAAQE,EAAU,GA9CxB,SAAuBE,EAAUR,GAC/B,MAAMS,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEL,E,MAAUR,IAEpBc,EAAO,C,SAAEN,E,MAAUR,GAAQ,GAE5BA,EAAM,G,EAqBPgB,CAAcV,EAAqB,IAAZA,EAAgBV,EAAkBM,GACtDe,MAAK,EAACT,SAAEA,EAAQR,MAAEA,MACjBkB,EAAA/B,GAASgC,OAAOC,QACd,uBAAqBZ,QAAiBR,MAAU,IAGnDqB,OAAM,EAACb,SAAEA,EAAQR,MAAEA,MAClBkB,EAAA/B,GAASgC,OAAOG,QACd,sBAAoBd,QAAiBR,MAAU,IAGlDuB,SAAQ,KACPjB,IACAC,GAAc,G,CAMtBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst refs = {\n  formCreatePromises: document.querySelector('.form'),\n  btnCreatePromise: document.querySelector('button'),\n};\nrefs.formCreatePromises.addEventListener('submit', onFormCreatePromisesSubmit);\n\nfunction onFormCreatePromisesSubmit(e) {\n  e.preventDefault();\n\n  const inputFirstDelay = Number(e.target.elements.delay.value);\n  const inputDelayStep = Number(e.target.elements.step.value);\n  const inputAmountPromises = Number(e.target.elements.amount.value);\n\n  let counter = 1;\n\n  function countPromise() {\n    if (counter <= inputAmountPromises) {\n      createPromise(counter, counter === 1 ? inputFirstDelay : inputDelayStep)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        })\n        .finally(() => {\n          counter++;\n          countPromise();\n        });\n    } else {\n      return (counter = 1);\n    }\n  }\n  countPromise();\n}\n\n// setTimeout(() => {\n//   for (let i = 1; i <= inputAmountPromises; i += 1) {\n//     createPromise(i, inputDelayStep)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// }, inputFirstDelay);\n"],"names":["$eWCmQ","parcelRequire","formCreatePromises","document","querySelector","btnCreatePromise","addEventListener","e","preventDefault","inputFirstDelay","Number","target","elements","delay","value","inputDelayStep","step","inputAmountPromises","amount","counter","countPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","catch","failure","finally"],"version":3,"file":"03-promises.33060b9b.js.map"}